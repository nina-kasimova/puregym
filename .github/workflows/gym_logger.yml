name: PureGym Attendance Logger

on:
  schedule:
    - cron: "*/30 * * * *"  # Runs every 30 minutes
  workflow_dispatch:        # Allows manual trigger from GitHub UI

jobs:
  log-attendance:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 1: Get the ID of the latest successful run of this workflow
    # This is crucial to download the previously uploaded artifact
    - name: Get latest successful workflow run ID
      id: get_run_id # Assign an ID to this step to reference its outputs
      uses: actions/github-script@v7 # Use github-script to interact with GitHub API
      with:
        script: |
          const { owner, repo } = context.repo;
          // context.workflow_file gives the actual filename of the workflow (e.g., 'puregym_attendance_logger.yml')
          const workflowFileName = context.workflow_file;
          // context.ref_name gives the branch name (e.g., 'main')
          const branch = context.ref_name;

          console.log(`Searching for latest successful run for workflow: ${workflowFileName} on branch: ${branch}`);

          // Query the GitHub API for workflow runs
          const runs = await github.rest.actions.listWorkflowRuns({
            owner,
            repo,
            workflow_id: workflowFileName, // Use the workflow file name here
            branch,
            status: 'success', // Only consider successful runs
            per_page: 1,       // We only need the most recent one
          });

          if (runs.data.workflow_runs.length > 0) {
            const latestRunId = runs.data.workflow_runs[0].id;
            console.log(`Found latest successful run ID: ${latestRunId}`);
            core.setOutput('run_id', latestRunId); // Set this as an output for subsequent steps
          } else {
            console.log('No previous successful workflow run found for this workflow and branch.');
            core.setOutput('run_id', ''); // No previous successful run found
          }
        github-token: ${{ secrets.GITHUB_TOKEN }} # Required for API access

    # Step 2: Download the previous gym_log.csv artifact using the obtained run ID
    # This step will only run if a previous successful run ID was found
    - name: Download previous gym_log artifact
      uses: actions/download-artifact@v4
      with:
        name: gym_log
        run-id: ${{ steps.get_run_id.outputs.run_id }} # Use the output from the previous step
        path: . # Download to the current working directory
      if: ${{ steps.get_run_id.outputs.run_id != '' }} # Only run if a run_id was found

    - name: Run PureGym Logger
      env:
        PUREGYM_EMAIL: ${{ secrets.PUREGYM_EMAIL }}
        PUREGYM_PASS: ${{ secrets.PUREGYM_PASS }}
      run: python main.py

    - name: Upload gym_log.csv artifact
      uses: actions/upload-artifact@v4
      with:
        name: gym_log
        path: gym_log.csv
        overwrite: true