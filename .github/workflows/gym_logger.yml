name: PureGym Attendance Logger

on:
  schedule:
    - cron: "*/30 * * * *"  # Runs every 30 minutes
  workflow_dispatch:        # Allows manual trigger from GitHub UI

jobs:
  log-attendance:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 1: Get the ID of the latest successful run of this workflow
    # This is crucial to download the previously uploaded artifact
    - name: Get latest successful workflow run ID
      id: get_run_id # Assign an ID to this step to reference its outputs
      uses: actions/github-script@v7 # Use github-script to interact with GitHub API
      with:
        script: |
          const { owner, repo } = context.repo;
          const workflowName = context.workflow; // Gets the 'name' from your YAML: "PureGym Attendance Logger"
          const branch = context.ref.replace('refs/heads/', ''); // Get just the branch name (e.g., 'main')

          console.log(`Attempting to find workflow ID for name: "${workflowName}" on branch: "${branch}"`);

          let workflowId = '';
          try {
            // First, list all workflows in the repository to find the numeric ID by name
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner,
              repo,
            });

            const targetWorkflow = workflows.data.workflows.find(wf => wf.name === workflowName);

            if (targetWorkflow) {
              workflowId = targetWorkflow.id;
              console.log(`Found numeric workflow ID: ${workflowId} for name: "${workflowName}"`);
            } else {
              // Fallback: If for some reason the name isn't found, use the filename as ID.
              // This is less reliable but provides a fallback.
              workflowId = context.workflow_file;
              console.log(`Workflow with name "${workflowName}" not found. Falling back to file name as ID: ${workflowId}`);
            }

            if (!workflowId) {
              console.error('Could not determine workflow ID or file name. Cannot proceed.');
              core.setFailed('Could not determine workflow ID or file name.');
              return; // Exit the script if workflowId is still empty
            }

            // Now, list runs for that specific workflow ID
            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflowId, // Use the found ID or filename
              branch: branch,
              status: 'success',
              per_page: 1,
            });

            if (runs.data.workflow_runs.length > 0) {
              const latestRunId = runs.data.workflow_runs[0].id;
              console.log(`Found latest successful run ID: ${latestRunId}`);
              core.setOutput('run_id', latestRunId); // Set this as an output for subsequent steps
            } else {
              console.log('No previous successful workflow run found for this workflow and branch. This is expected for the first run or after artifact expiration.');
              core.setOutput('run_id', ''); // No previous successful run found
            }
          } catch (error) {
            console.error(`Error fetching workflow runs: ${error.message}`);
            core.setOutput('run_id', ''); // Ensure output is empty on error
            core.setFailed(`Failed to get latest successful workflow run ID: ${error.message}`); # Fail the step if API call itself fails
          }
        github-token: ${{ secrets.GITHUB_TOKEN }} # Required for API access

    # Step 2: Download the previous gym_log.csv artifact using the obtained run ID
    # This step will only run if a previous successful run ID was found
    - name: Download previous gym_log artifact
      uses: actions/download-artifact@v4
      with:
        name: gym_log
        run-id: ${{ steps.get_run_id.outputs.run_id }} # Use the output from the previous step
        path: . # Download to the current working directory
      if: ${{ steps.get_run_id.outputs.run_id != '' }} # Only run if a run_id was found

    - name: Run PureGym Logger
      env:
        PUREGYM_EMAIL: ${{ secrets.PUREGYM_EMAIL }}
        PUREGYM_PASS: ${{ secrets.PUREGYM_PASS }}
      run: python main.py

    - name: Upload gym_log.csv artifact
      uses: actions/upload-artifact@v4
      with:
        name: gym_log
        path: gym_log.csv
        overwrite: true 
